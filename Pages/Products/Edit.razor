@page "/products/edit/{id:int}"
@using Microsoft.EntityFrameworkCore
@inject AppDbContext Context;
@inject NavigationManager NavManager

<h1>@_model?.Title</h1>

<EditForm Model="@_model" OnValidSubmit="@HandleSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="mb-3">
        <label for="Title" class="form-label">Title</label>
        <InputText class="form-control" type="text" id="Title" @bind-Value="_model.Title" />
    </div>

    <div class="mb-3">
        <label for="Price" class="form-label">Price</label>
        <InputNumber class="form-control" type="number" id="Price" @bind-Value="_model.Price" />
    </div>

    <div class="mb-3">
        <label for="CategoryId" class="form-label">Category</label>
        <InputSelect id="categoryId" @bind-Value="_model.CategoryId" class="form-control">
            @foreach (var category in _categories)
            {
                <option value="@category.Id">@category.Title</option>
            }
        </InputSelect>
    </div>

    @if (!string.IsNullOrEmpty(_errorMessage))
    {
        <div class="alert alert-danger" role="alert">
            @_errorMessage
        </div>
    }

    <button class="btn btn-success" type="submit">SAVE</button>
</EditForm>

@code {

    [Parameter]
    public int Id { get; set; }

    private Product? _model = new();
    private List<Category> _categories = new();
    private string? _errorMessage = null;

    protected override async Task OnInitializedAsync()
    {
        _categories = await Context.Categories.AsNoTracking().OrderBy(x => x.Title).ToListAsync();
        _model = await Context.Products.AsNoTracking().FirstOrDefaultAsync(x => x.Id == Id);
    }

    private async Task HandleSubmit()
    {
        try
        {
            var prod = await Context.Products.FirstOrDefaultAsync(x => x.Id == Id);
            if (prod is null)
                throw new Exception("Produto não encontrado");

            prod.Title = _model.Title;
            prod.Price = _model.Price;
            prod.CategoryId = _model.CategoryId;

            Context.Products.Update(prod);
            await Context.SaveChangesAsync();

            NavManager.NavigateTo("/products");
        }
        catch (Exception ex)
        {
            _errorMessage = ex.Message;
        }
    }

}